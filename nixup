#! /usr/bin/env nix-shell
#! nix-shell -i bash shell.nix
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
set -euo pipefail
set -x

unset NIX_PATH

cd "${DIR}"
mode="default"
host="$(hostname)"

builderargs=()

[[ "${1:-""}" != "" ]] && mode="${1}" && shift

#
# TODO: update should update local imports, build local, then go back and push refs if good!
#
# TODO: develop is missing --pure

function update() {
  (cd "./scripts" && ./rebase-pulls.sh) # our upstreams

  (cd "./overlay-pkgs" && ./update.sh) # our overlay-pkgs

  # flakes (TODO: no really, what does this do?)
  nix --experimental-features 'nix-command flakes' --pure-eval \
    flake update --no-registries

  # TODO: Why does this ever have an effect? Needs to allow for more aggression
  nix --experimental-features 'nix-command flakes' --pure-eval \
    flake update --no-registries \
      --update-input master --update-input stable --update-input cmpkgs --update-input pipkgs \
      --update-input nix --update-input home --update-input construct \
      --update-input hardware --update-input mozilla --update-input wayland

  # legacy .imports
  (cd "./.imports" && ./update.sh)
}

function flakes() {
  args=()
  if [[ "${1:-""}" == "local" ]]; then
    shift
    args+=(--override-input master "/home/cole/code/nixpkgs/master" \
            --override-input stable "/home/cole/code/nixpkgs/stable" \
            --override-input cmpkgs "/home/cole/code/nixpkgs/cmpkgs" \
            --override-input pipkgs "/home/cole/code/nixpkgs/pipkgs" \
            --override-input vimpluginsPkgs "/home/cole/code/nixpkgs/pulls/vimplugins" \
            --override-input home   "/home/cole/code/home-manager/cmhm")
  fi
  args+=(".#nixosConfigurations.${host}.config.system.build.toplevel")

  if [[ "${1:-""}" == "switch" ]]; then
    time sudo nix --experimental-features 'nix-command flakes' --pure-eval \
      build --profile /nix/var/nix/profiles/system "${args[@]}"
    time sudo nix --experimental-features 'nix-command flakes' --pure-eval \
      shell -vv "$(readlink -f result)" -c switch-to-configuration "${1}"
  else
    # just build
    time nix --experimental-features 'nix-command flakes' --pure-eval \
      build "${args[@]}"
  fi
  echo -e "$(readlink -f result)"
}

function legacy() {
  if [[ "${1:-""}" == "local" ]]; then
    shift
    export NIXPKGS_LOCAL_IMPORTS_ALLOWED="true"
    tl="$(set -e; nix-build --show-trace "./machines/${host}" > /tmp/nixos-legacy-local; cat /tmp/nixos-legacy-local)"
  else
    tl="$(set -e; nix-build --show-trace "./machines/${host}" > /tmp/nixos-legacy; cat /tmp/nixos-legacy)"
  fi

  if [[ "${1:-""}" == "switch" ]]; then
    sudo nix-env --set --profile /nix/var/nix/profiles/system ${tl}
    sudo nix-shell -p ${tl} --command "switch-to-configuration ${1}"
  fi
}

# sadly, this is considerably faster than
# using nix and its usual remote building functionality
function remote() {
  cache="colemickens"
  cachixkey="$(set -e; gopass show "websites/cachix.org/apikey/${cache}")"

  machine="${1}"; shift
  remote="${1}"; shift

  #drv="$(nix eval --pure-eval ".#nixosConfigurations.${machine}.config.system.build.toplevel")" # TODO: why????
  drv="$(set -e; nix-instantiate "machines/${machine}")"
  out="$(set -e; nix --experimental-features 'nix-command flakes' --pure-eval \
    show-derivation "${drv}" | jq -r 'to_entries[].value.outputs.out.path')" # TODO: must be a better way # (in v1, there's nix-store query that works)
  
  if nix-store \
    --option "narinfo-cache-negative-ttl" "0" \
    --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org' \
    --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA=' \
    -r "${out}"; then
      return
  fi

  ## COPY->COMPRESS->RSYNC DRV TO BUILDER
  t="/tmp/tmpnixpath"; #rm -rf "${t}"; trap "rm -rf $t" EXIT;
  nix-shell -I nixpkgs=https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz -p nix --command "nix copy --to file://${t} ${drv}" # see: https://github.com/NixOS/nix/issues/3696
  rsync -avh "${t}/" "${remote}:${t}"
  ssh "${remote}" "nix --experimental-features 'nix-command' copy --from file://${t} ${drv}"

  ## (ON BUILDER): BUILD
  ssh "${remote}" \
    "nix-shell -I nixpkgs=https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz -p nixFlakes --command \
      \"nix --experimental-features 'nix-command flakes' --pure-eval \
        --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org' \
        --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA=' \
        --option 'build-cores' '0' \
        --option 'narinfo-cache-negative-ttl' '0' \
          build --keep-going ${drv}\""

  ## (ON BUILDER): PUSH TO CACHE
  ssh "${remote}" \
    "nix-shell -I nixpkgs=https://github.com/nixos/nixpkgs/archive/nixos-20.03.tar.gz -p cachix --command \
      \"echo ${out} | env CACHIX_SIGNING_KEY=${cachixkey} cachix push ${cache}\""
}

function deploy() {
  machine="${1}"; shift
  remote="${1}"; shift
  drv="$(set -e; nix-instantiate "machines/${machine}")"
  out="$(set -e; nix --experimental-features 'nix-command flakes' --pure-eval \
    show-derivation "${drv}" | jq -r 'to_entries[].value.outputs.out.path')" # TODO: must be a better way (see above)
  
  ## (ON TARGET): REALIZE FROM CACHE
  ssh "${remote}" "nix-store \
    --option 'narinfo-cache-negative-ttl' '0' \
    --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org' \
    --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA=' \
    -r \"${out}\""

  ## (ON TARGET): ACTIVATE
  ssh "${remote}" "\
    sudo bash -c \"\
      nix-env --set --profile /nix/var/nix/profiles/system ${out} \
      && ${out}/bin/switch-to-configuration switch\""
}

function compare() {
  echo "*** legacy ***";       legacy      
  echo "*** legacy local ***"; legacy local
  echo "*** flakes ***";       flakes      
  echo "*** flakes local ***"; flakes local
  echo "***************"

  echo "legacy      : $(set -e; cat /tmp/nixos-legacy)"
  echo "legacy local: $(set -e; cat /tmp/nixos-legacy-local)"
  echo "flakes      : $(set -e; cat /tmp/nixos-flakes)"
  echo "flakes local: $(set -e; cat /tmp/nixos-flakes-local)"
  set +x; echo "***************"
}

function default() {
  nixup update
  nixup flakes local switch
  nixup flakes local | cachix push colemickens
}

time "${mode}" "${@}"
