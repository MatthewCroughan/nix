#! /usr/bin/env bash

##! /usr/bin/env nix-shell
##! nix-shell -i bash shell.nix
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
set -euo pipefail
set -x

unset NIX_PATH
cd "${DIR}"

cache="colemickens"
cachixkey="$(set -e; gopass show "websites/cachix.org/apikey/${cache}")"
tarunstable="https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz"
tarstable="https://github.com/nixos/nixpkgs/archive/nixos-20.03.tar.gz"

function update() {
  (set -e; cd "./pkgs" && ./update.sh) # our overlay-pkgs

  (set -e
    cd ~/code/nixpkgs/master; git reset --hard "nixpkgs/master" && git push origin HEAD -f; cd -

    #cmpkgsupstream="nixpkgs/nixos-unstable-small"
    cmpkgsupstream="nixpkgs/nixos-unstable"
    pipkgsupstream="nixpkgs/nixos-unstable"
    cd ~/code/nixpkgs/cmpkgs; git rebase "${cmpkgsupstream}"; git push origin HEAD -f
    cd ~/code/nixpkgs/pipkgs; git rebase "${pipkgsupstream}"; git push origin HEAD -f
  )

  # flakes (TODO: no really, what does this do?)
  nix --experimental-features 'nix-command flakes' --pure-eval \
    flake update --no-registries

  # TODO: Why does this ever have an effect? Needs to allow for more aggression
  nix --experimental-features 'nix-command flakes' --pure-eval \
    flake update --no-registries \
      --update-input master --update-input stable --update-input cmpkgs --update-input pipkgs \
      --update-input nix --update-input home --update-input construct \
      --update-input hardware --update-input firefox --update-input wayland \
      --update-input mobile-nixos --update-input wip-pinebook-pro \
      --update-input nixos-veloren
}

buildargs=(
  --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org'
  --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
  -j 2
)

function build() {
  set -euo pipefail
  thing="${1:-".#hosts.$(hostname)"}"; shift
  drv="$(set -euo pipefail; instantiate "${thing}")"
  out="$(set -euo pipefail; nix-build "${buildargs[@]}" --keep-going "${drv}")"
  #echo "${out}" | env CACHIX_SIGNING_KEY=${cachixkey} cachix push "${cache}" &>/dev/stderr
  echo -e "${out}"
}

function activate() {
  set -euo pipefail
  thing="${1:-".#hosts.$(hostname)"}"; [[ ! -z "${1:-}" ]] && shift
  out="$(set -euo pipefail; build "${thing}")"
  time sudo nix --experimental-features 'nix-command flakes' --pure-eval \
      build --profile /nix/var/nix/profiles/system "${out}"
  time sudo nix --experimental-features 'nix-command flakes' --pure-eval \
    shell -vv "${out}" -c switch-to-configuration switch
}

function instantiate() {
  set -euo pipefail
  thing="${1:-".#hosts.$(hostname)"}"; [[ ! -z "${1:-}" ]] && shift
  drv="$(set -euo pipefail; nix --experimental-features 'nix-command flakes' --pure-eval \
    eval \
      --override-input nixpkgs "/home/cole/code/nixpkgs/cmpkgs" \
      --override-input firefox "/home/cole/code/flake-firefox-nightly" \
      --override-input sops-nix "/home/cole/code/sops-nix" \
      --override-input home-manager "/home/cole/code/home-manager/cmhm" \
      --override-input mobile-nixos "/home/cole/code/mobile-nixos" \
      --override-input nixpkgs-wayland "/home/cole/code/nixpkgs-wayland" \
      --override-input wip-pinebook-pro "/home/cole/code/wip-pinebook-pro" \
      --override-input nixos-veloren "/home/cole/code/nixos-veloren" \
      --show-trace \
      --raw "${thing}")"
  drv="$(set -euo pipefail; nix --experimental-features 'nix-command flakes' --pure-eval \
    show-derivation "${drv}" | jq -r 'to_entries[].key')"
  echo -e "${drv}"
}

function remote() {
  set -euo pipefail
  remote="${1}"; shift
  thing="${1:-".#hosts.$(hostname)"}"; [[ ! -z "${1:-}" ]] && shift
  drv="$(set -euo pipefail; instantiate "${thing}")"

  ## COPY->COMPRESS->RSYNC DRV TO BUILDER
  t="/tmp/tmpnixpath"; #rm -rf "${t}"; trap "rm -rf $t" EXIT;

  # local, push drvs to remote
  nix-shell -I nixpkgs=https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz -p nix --command "nix copy --to file://${t} ${drv}" # see: https://github.com/NixOS/nix/issues/3696
  rsync -ah "${t}/" "${remote}:${t}"

  # build drvs, push to cachix
  ssh "${remote}" "nix-shell -I nixpkgs=${tarstable}   -p nix       --command \"nix copy --from file://${t} ${drv}\"" &>/dev/stderr
  ssh "${remote}" "nix-shell -I nixpkgs=${tarunstable} -p nixFlakes --command '$(printf '\"%s\" ' nix-build "${buildargs[@]}" --keep-going ${drv}) > /tmp/s_out'" &>/dev/stderr
  ssh "${remote}" "nix-shell -I nixpkgs=${tarstable}   -p cachix    --command 'cat /tmp/s_out | env CACHIX_SIGNING_KEY=${cachixkey} cachix push ${cache} >/dev/stderr'" &>/dev/stderr

  # done
  echo -e "$(ssh ${remote} cat /tmp/s_out)"
}

function deploy() {
  remote="${1}"; shift
  if [[ "${1:-}" != "" ]]; then out="${1}"; shift;
  else drv="$(instantiate "${thing}")"; out="READ_OUT_FROM_DRV"; fi

  ## (ON TARGET): REALIZE FROM CACHE
  ssh "${remote}" "$(printf '\"%s\" ' nix-store "${buildargs[@]}" -r "${out}")"

  ## (ON TARGET): ACTIVATE
  ssh "${remote}" "sudo bash -c \"\
    nix-env --set --profile /nix/var/nix/profiles/system ${out} \
    && ${out}/bin/switch-to-configuration switch\""
}

function default() {
  update
  thing=".#hosts.$(hostname)"
  activate "${thing}"
}

function pi() {
  thing=".#hosts.rpione"
  out="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"
  #rasp="$(set -euo pipefail; remote "cole@192.168.1.2" "${thing}")"
  echo "rasp"; echo "$out"; echo
  deploy cole@192.168.1.2 "${out}"
}

function book() {
  thing=".#hosts.pinebook"
  out="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"
  echo "book"; echo "$out"; echo
  deploy cole@192.168.1.155 "${out}/toplevel"
}

function peep() {
  thing=".#hosts.pinephone"
  out="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"
  echo "book"; echo "$out"; echo
  deploy cole@192.168.1.256 "${out}/toplevel"
}

# function pixel() {
#   cd ~/code/mobile-nixos-blueline
#   export NIX_PATH=nixpkgs=/home/cole/code/nixpkgs/cmpkgs
#   drv="$(nix-instantiate examples/demo/ --argstr device google-blueline -A android-burn-tool)"
#   pixel="$(remote cole@13.77.182.36 $drv push)" # build on rpi and push when done w/ bld
#   #pixel="$(remote $drv root@nixos push)" # build on rpi and push when done w/ bld
# }

function azdev() {
  image_id="$(set -euo pipefail; AZURE_GROUP=colemick-dev ./scripts/upload-image.sh '.#examples.basic.azureImage')"
  az group create -n "colemick-dev" -l "westus2"
  az vm create \
    --name "colemick-dev" \
    --resource-group "colemick-dev" \
    --image "${image_id}" \
    --size "Standard_D32s_v3" \
    --admin-username "cole" --location "westus2" \
    --ssh-key-values "$(ssh-add -L)" \
    --ephemeral-os-disk true
}

mode="${1:-"default"}"
[[ ! -z "${1:-}" ]] && shift
time "${mode}" "${@}"
