#! /usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
set -euo pipefail
set -x

unset NIX_PATH
cd "${DIR}"

cache="colemickens"
cachixpkgs="https://github.com/nixos/nixpkgs/archive/nixos-20.03.tar.gz" # where to find pkgs.cachix
unstablepkgs="https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz" # where to find nixUnstable
cachixkey="$(set -e; gopass show "websites/cachix.org/apikey/${cache}")"

nixargs=(--experimental-features "nix-command flakes ca-references recursive-nix")
# TODO: research post-build hooks?
buildargs=(
  --option 'extra-binary-caches' 'https://cache.nixos.org https://colemickens.cachix.org https://nixpkgs-wayland.cachix.org'
  --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= colemickens.cachix.org-1:bNrJ6FfMREB4bd4BOjEN85Niu8VcPdQe4F4KxVsb/I4= nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA='
  --option 'build-cores' '0'
  --option 'narinfo-cache-negative-ttl' '0'
)
evalargs=(
  #--impure
  --override-input master "/home/cole/code/nixpkgs/master"
  --override-input nixpkgs "/home/cole/code/nixpkgs/cmpkgs"
  --override-input pipkgs "/home/cole/code/nixpkgs/pipkgs"
  --override-input firefox "/home/cole/code/flake-firefox-nightly"
  --override-input home-manager "/home/cole/code/home-manager/cmhm"
  --override-input mobile-nixos "/home/cole/code/mobile-nixos"
  --override-input nixos-azure "/home/cole/code/nixos-azure"
  --override-input nixos-veloren "/home/cole/code/nixos-veloren"
  --override-input nixpkgs-wayland "/home/cole/code/nixpkgs-wayland"
  --override-input sops-nix "/home/cole/code/sops-nix"
  --override-input wip-pinebook-pro "/home/cole/code/wip-pinebook-pro"
)

function update() {
  set -euo pipefail
  set +x; printf "\n\n%s\n" ":::::::: updating all inputs" &>/dev/stderr; set -x
  nix flake update --recreate-lock-file

  set +x; printf "\n\n%s\n" ":::::::: updating all (local, override) inputs" &>/dev/stderr; set -x
    cd ~/code/nixpkgs/master; git remote update; git reset --hard "nixpkgs/master" && git push origin HEAD -f || false
  cd -; cd ~/code/nixpkgs/cmpkgs;        git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/nixpkgs/pipkgs;        git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/flake-firefox-nightly; git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/home-manager/cmhm;     git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/mobile-nixos;          git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/nixos-azure;           git pull --rebase && git push origin HEAD -f || false
  #cd -; cd ~/code/nixos-veloren;         git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/sops-nix;              git pull --rebase && git push origin HEAD -f || false
  cd -; cd ~/code/wip-pinebook-pro;      git pull --rebase && git push origin HEAD -f || false

  set +x; printf "\n\n%s\n" ":::::::: updating our own packages" &>/dev/stderr; set -x
  cd -; cd "./pkgs" && ./update.sh;
  cd -;
}
function ssh_cachix_path() {
  set -euo pipefail
  ssh "${1}" "nix-shell -I nixpkgs=${cachixpkgs} -p cachix --command \
    'echo ${2} | env CACHIX_SIGNING_KEY=${cachixkey} cachix push ${cache} >/dev/stderr'" &>/dev/stderr
}
function ssh_nix_unstable() {
  local r="${1}"; shift;
  ssh "${r}" -- "nix-shell -I nixpkgs=${unstablepkgs} -p nixUnstable --run '$(printf '\"%s\" ' "${@}")'"
}

function build() {
  set -euo pipefail
  thing="${1}"; shift
  remote="${1}"; shift
  target="${1:-""}"; shift

  # LOCAL: eval the out to be able to check for substitute
  set +x; printf "\n\n%s\n" ":::::::: eval ${thing}" &>/dev/stderr; set -x
  out="$(nix "${nixargs[@]}" eval "${evalargs[@]}" --raw "${thing}")"

  # TARGET: return if we can realize on target
  set +x; printf "\n\n%s\n" ":::::::: trying to realize ${out} on ${target}" &>/dev/stderr; set -x
  if ssh_nix_unstable "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -j0 "${out}"; then
    echo -e "${out}"; return 0
  fi

  # LOCAL: eval the drvPath to build the derivation
  set +x; printf "\n\n%s\n" ":::::::: eval '${thing}.drvPath'" &>/dev/stderr; set -x
  local drv="$(set -euo pipefail; nix "${nixargs[@]}" eval "${evalargs[@]}" --raw "${thing}.drvPath")"

  # LOCAL: copy drvs to tmp
  local t="/tmp/tmpnixpath"
  nix "${nixargs[@]}" copy --to "file://${t}" --derivation "${drv}"

  # LOCAL->REMOTE: rsync drvs
  set +x; printf "\n\n%s\n" ":::::::: rsync ${t} to ${remote}" &>/dev/stderr; set -x

  rsync -ah "${t}/" "${remote}:${t}"

  # REMOTE: copy drvs to store
  ssh_nix_unstable "${remote}" nix "${nixargs[@]}" copy --from file://${t} --derivation ${drv}

  # REMOTE: build
  set +x; printf "\n\n%s\n" ":::::::: build ${drv} on ${remote}" &>/dev/stderr; set -x

  ssh_nix_unstable "${remote}" nix "${nixargs[@]}" build "${buildargs[@]}" --keep-going "${drv}"

  if [[ ! -z "${cachixkey:-""}" ]]; then
    # REMOTE: push $out to cachix
    set +x; printf "\n\n%s\n" ":::::::: pushing ${out} to cachix" &>/dev/stderr; set -x

    ssh_cachix_path "${remote}" "${out}"
  fi

  # if we didn't list a target, we're just pushing the build up, we can be done
  if [[ -z "${target:-""}" ]]; then
    echo -e "${out}"; return 0
  fi

  if [[ ! -z "${USE_CACHIX:-""}" ]]; then
    # TARGET: realize from cachix (if it has internet and USE_CACHIX)
    set +x; printf "\n\n%s\n" ":::::::: trying to realize ${out} (from cache) on ${target}" &>/dev/stderr; set -x

    ssh_nix_unstable "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -j0 "${out}"
    #if ssh_nix_unstable "${target}" nix "${nixargs[@]}" build "${buildargs[@]}" -j0 "${out}"; then
    #  echo -e "${out}"; return 0
    # else
    #   set +x; echo; echo; echo ":::::::: copying ${out} from ${remote} on ${target}"; set -x
    #   nix copy --from ssh://${remote} "${out}"
    #   echo "!!!!"; echo "!!!!"; echo "!!!!"; echo "!!!! Nix bug, we pushed this to cachix, yet it can't get it?"
    #   sleep 100
    #   echo -e "${out}"; return 0
    #fi
  fi

  # TARGET: copy from builder (if it has internet)
  set +x; printf "\n\n%s\n" ":::::::: copying ${out} from ${remote} on ${target}" &>/dev/stderr; set -x

  if ssh -A "${target}" "$(printf '\"%s\" ' nix copy --from "ssh://${remote}" "${out}")"; then
    echo -e "${out}"; return 0
  fi

  # if we still cna't realize on device,
  # see if we can realize here and then push to device
  # (this applies for blueline where we cant pull but can be pushed to)
  if [[ ! -z "${cachixkey:-""}" ]]; then
    set +x; printf "\n\n%s\n" ":::::::: trying to realize ${out} (from cache)" &>/dev/stderr; set -x

    nix "${nixargs[@]}" build "${buildargs[@]}" "${thing}" -j0
  else
    set +x; printf "\n\n%s\n" ":::::::: manually copy ${out} from ${remote}" &>/dev/stderr; set -x

    nix "${nixargs[@]}" copy --from "ssh://${remote}" "${out}"
  fi

  # now that we have $out here, we can push to remote
  set +x; printf "\n\n%s\n" ":::::::: manually copy ${out} to ${target}" &>/dev/stderr; set -x

  nix "${nixargs[@]}" copy --to "ssh://${target}" "${out}"

  echo -e "${out}"; return 0
}

function activate() {
  set -euo pipefail
  local bo="$(set -euo pipefail; build "${@}")"
  local target="${3:-"cole@localhost"}"

  ssh -A "${target}" "$(printf '\"%s\" ' sudo nix build --profile /nix/var/nix/profiles/system "${bo}")";
  ssh -A "${target}" "$(printf '\"%s\" ' sudo nix shell -vv "${bo}" -c switch-to-configuration switch)";
}

function repro() {
  local thing="${1:-".#hosts.$(hostname)"}";

  nix build --out-link "/tmp/nixcfg_local" "${buildargs[@]}" "${evalargs[@]}" "${thing}"
  local out_local="$(readlink -f /tmp/nixcfg_local)"

  nix build --out-link "/tmp/nixcfg_github" "${buildargs[@]}" "github:colemickens/nixcfg#${thing:2}"
  local out_github="$(readlink -f /tmp/nixcfg_github)"

  nix flake update --no-registries --recreate-lock-file
  nix build --out-link "/tmp/nixcfg_locked" "${buildargs[@]}" "${thing}"
  local out_locked="$(readlink -f /tmp/nixcfg_locked)"

  set +x; echo; echo; echo;
  echo "out (flake.lock): ${out_locked}"
  echo "out (local repo): ${out_local}"
  echo "out     (github): ${out_github}"

  if [[ "${out_locked}" != "${out_local}" ]]; then
    exit -1
  fi
}

function all() {
  nix eval --raw "${buildargs[@]}" "${evalargs[@]}" \
    ".#hosts.rpione.drvPath" \
    ".#hosts.rpitwo.drvPath" \
    ".#hosts.book.drvPath" \
    ".#hosts.pinephone.drvPath" \
    ".#hosts.bluephone.drvPath"
}




##
## device specific handling (replace with nixus2?)
function pi() {
  activate ".#hosts.rpione" "colemickens@aarch64.nixos.community" "cole@192.168.1.2"
  ssh cole@192.168.1.2 sudo reboot
}
function pi2() {
  build ".#hosts.rpitwo" "colemickens@aarch64.nixos.community" "cole@localhost"
  ssh cole@192.168.1.3 sudo reboot
}
function pi2sd() {
  thing=".#hosts.rpitwo_sd"
  remote "colemickens@aarch64.nixos.community" "${thing}"
  nix build "${buildargs[@]}" -j0 "${thing}"
}

#
# PIXEL 3
#

function bluereset() {
  (
    cd ~/downloads/BLUE/blueline-qq3a.200805.001
    # base should be sufficient to restore boot_a
    # which lets us get to fastbootd where we can then flash what we need
    ./flash-base.sh
  )
  fastboot flash userdata "/home/cole/downloads/BLUE/NIXOS_SYSTEM.img"
  fastboot reboot bootloader
}

function blue() {
  sudo ip link set usb0 up || true
  sudo ip addr add 172.16.42.2/24 dev usb0 || true
  sudo ip addr add brd 172.16.42.255 dev usb0 || true
  sudo ip route add 172.16.42.0/24 dev usb0 || true

  remote="ssh://cole@172.16.42.1"
  thing=".#hosts.bluephone.toplevel"
  toplevel="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"

  nix-store -r "${toplevel}"
  nix copy --to "${remote}" "${toplevel}"
  ssh "${remote}" "sudo bash -c \"\
    nix-env --set --profile /nix/var/nix/profiles/system ${toplevel} \
    && ${toplevel}/bin/switch-to-configuration switch\""

  # simpler form of ^, but doesnt work - phone can't realize from internet yet
  #deploy root@172.16.42.1 "${toplevel}"
}

function bluereboot() {
  nixup blue || true
  nixup bluessh sudo reboot bootloader || true
  nixup blueboot
}

function blueboot() {
  thing=".#hosts.bluephone.bootimg"
  out="$(set -euo pipefail; instantiate "${thing}")"
  if [[ ! -e "${out}" ]]; then
    bootimg="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"
    nix-store -r "${bootimg}"
  fi
  fastboot set_active a
  fastboot boot "${out}"
}

function bluekernel() {
  thing=".#hosts.bluephone.kernel"
  out="$(set -euo pipefail; instantiate "${thing}")"
  if [[ ! -e "${out}" ]]; then
    kernel="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"
    nix-store -r "${kernel}"
  fi
  nix-store -r "${out}"
}


function bluessh() {
  sudo ip link set usb0 up || true
  sudo ip addr add 172.16.42.2/24 dev usb0 || true
  sudo ip addr add brd 172.16.42.255 dev usb0 || true
  sudo ip route add 172.16.42.0/24 dev usb0 || true
  TERM=xterm-256color ssh cole@172.16.42.1 "${@}"
}

#
# PINEPHONE
#

function pine() {
  thing=".#hosts.pinephone"
  export NIX_PATH=nixpkgs=/home/cole/code/nixpkgs/cmpkgs
  out="$(set -euo pipefail; remote "colemickens@aarch64.nixos.community" "${thing}")"
  echo "book"; echo "$out"; echo
  #deploy cole@192.168.1.256 "${out}/toplevel"
  nix-store -r "${out}"
  fastboot boot "${out}/android-bootimg"
}

#
# PINEBOOK PRO
#

function book() {
  thing=".#nixosConfigurations.pinebook.config.system.build.toplevel"
  build "${thing}" "colemickens@aarch64.nixos.community" "cole@192.168.1.155"
}

#
# AZURE DEVBOX
#

function azdev() {
  image_id="$(set -euo pipefail; AZURE_GROUP=colemick-dev ./scripts/upload-image.sh '.#examples.basic.azureImage')"
  az group create -n "colemick-dev" -l "westus2"
  az vm create \
    --name "colemick-dev" \
    --resource-group "colemick-dev" \
    --image "${image_id}" \
    --size "Standard_D32s_v3" \
    --admin-username "cole" --location "westus2" \
    --ssh-key-values "$(ssh-add -L)" \
    --ephemeral-os-disk true
}

##
## NIXUP CLI
##

if [[ ! -z "${1:-""}" ]]; then cmd="${1}"; shift; fi

if [[ ! -z "${cmd:-""}" ]]; then
  "${cmd}" "${@}"
else
  set -euo pipefail
  update
  activate ".#toplevels.$(hostname)" "cole@localhost" "cole@localhost"
fi
